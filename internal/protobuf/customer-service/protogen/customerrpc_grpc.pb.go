// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: customerrpc.proto

package protogen

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerRpcClient is the client API for CustomerRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerRpcClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*Empty, error)
}

type customerRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerRpcClient(cc grpc.ClientConnInterface) CustomerRpcClient {
	return &customerRpcClient{cc}
}

func (c *customerRpcClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/customerrpc.CustomerRpc/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerRpcClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/customerrpc.CustomerRpc/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerRpcServer is the server API for CustomerRpc service.
// All implementations must embed UnimplementedCustomerRpcServer
// for forward compatibility
type CustomerRpcServer interface {
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*Empty, error)
	mustEmbedUnimplementedCustomerRpcServer()
}

// UnimplementedCustomerRpcServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerRpcServer struct {
}

func (UnimplementedCustomerRpcServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCustomerRpcServer) CreateUser(context.Context, *CreateUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCustomerRpcServer) mustEmbedUnimplementedCustomerRpcServer() {}

// UnsafeCustomerRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerRpcServer will
// result in compilation errors.
type UnsafeCustomerRpcServer interface {
	mustEmbedUnimplementedCustomerRpcServer()
}

func RegisterCustomerRpcServer(s grpc.ServiceRegistrar, srv CustomerRpcServer) {
	s.RegisterService(&CustomerRpc_ServiceDesc, srv)
}

func _CustomerRpc_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRpcServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerrpc.CustomerRpc/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRpcServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerRpc_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerRpcServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customerrpc.CustomerRpc/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerRpcServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerRpc_ServiceDesc is the grpc.ServiceDesc for CustomerRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customerrpc.CustomerRpc",
	HandlerType: (*CustomerRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _CustomerRpc_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _CustomerRpc_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customerrpc.proto",
}
